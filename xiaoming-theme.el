;;; xiaoming-theme.el --- My theme

;; Description: Xiaoming's theme
;; Created: 2014-08-08 21:09

;; Author: dongweiming dongweiming@douban.com
;; URL: http://github.com/dongweiming/emacs.d
;; Keywords: theme, elisp, emacs.d
;; Version: 1.0

;; Copyright (C) 2014, dongweiming, all rights reserved.
;; This program is free software; you can redistribute it and/or modify
;; it under the terms of the GNU General Public License as published by
;; the Free Software Foundation, either version 3 of the License, or
;; (at your option) any later version.
;; This program is distributed in the hope that it will be useful,
;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
;; GNU General Public License for more details.
;; You should have received a copy of the GNU General Public License
;; along with this program. If not, see <http://www.gnu.org/licenses/>.

;;; Commentary:

;;

;;; Code:

(deftheme xiaoming
    "A smooth dark theme.")

(let ((class '((class color) (min-colors 89)))
      (xiaoming/green "#6aaf50")
      (xiaoming/dark-green "#057f40")
      (xiaoming/blue "#5180b3")
      (xiaoming/blue-bg "#102843")
      (xiaoming/light-blue "#528fd1")
      (xiaoming/lighter-blue "#68a5e9")
      (xiaoming/orange "#FF8512")
      (xiaoming/tan "#bdbc61")
      (xiaoming/dark-tan "#7d7c61")
      (xiaoming/yellow "#baba36")
      (xiaoming/bright-yellow "#fffe0a")
      (xiaoming/purple "#9b55c3")
      (xiaoming/gray "#757575")
      (xiaoming/dark-gray "#656565")
      (xiaoming/darker-gray "#454545")
      (xiaoming/darkest-gray "#252525")
      (xiaoming/red "#cd5542")
      (xiaoming/dark-red "#9d2512")
      (xiaoming/cursor "#f57e00")
      (xiaoming/fringe "#1f1f1f")
      (xiaoming/region "#303030")
      (xiaoming/bg "gray13")
      (xiaoming/fg "#bdbdb3"))


  (custom-theme-set-faces
   'xiaoming
   '(default ((t (:family "default" :foundry "default" :width normal :height 1 :weight normal :slant normal :underline nil :overline nil :strike-through nil :box nil :inverse-video nil :foreground "#808080" :background "#1c1c1c" :stipple nil :inherit nil))))
   '(cursor ((t (:foreground "#1c1c1c" :background "#808080"))))
   '(fixed-pitch ((t (:family "Monospace"))))
   '(variable-pitch ((t (:family "Sans Serif"))))
   `(sp-show-pair-match-face ((t (:foreground "#191919" :background ,xiaoming/purple))))
   '(escape-glyph ((((background dark)) (:foreground "cyan")) (((type pc)) (:foreground "magenta")) (t (:foreground "brown"))))
   '(minibuffer-prompt ((t (:weight bold :slant normal :underline nil :inverse-video nil :foreground "#729fcf"))))
   '(highlight ((t (:background "#262626"))))
   '(region ((t (:weight normal :slant normal :underline nil :inverse-video t :foreground "#585858" :background "#1c1c1c"))))
   '(shadow ((t (:foreground "#585858"))))
   '(secondary-selection ((t (:background "#262626"))))
   '(trailing-whitespace ((t (:weight normal :slant normal :underline nil :inverse-video t :foreground "#d70000" :background "red1"))))
   '(font-lock-builtin-face ((t (:weight normal :slant normal :underline nil :inverse-video nil :foreground "#5f8700"))))
   '(font-lock-comment-delimiter-face ((t (:weight normal :slant italic :underline nil :inverse-video nil :foreground "#585858" :inherit (font-lock-comment-face)))))
   '(font-lock-comment-face ((t (:weight normal :slant italic :underline nil :inverse-video nil :foreground "#6171c4"))))
   '(font-lock-constant-face ((t (:weight normal :slant normal :underline nil :inverse-video nil :foreground "#00afaf"))))
   '(font-lock-doc-face ((t (:weight normal :slant italic :underline nil :inverse-video nil :foreground "#585858" :inherit (font-lock-string-face)))))
   '(font-lock-function-name-face ((t (:weight bold :slant normal :underline nil :inverse-video nil :foreground "#2075c7"))))
   '(font-lock-keyword-face ((t (:weight normal :slant normal :underline nil :inverse-video nil :foreground "#cb4b16"))))
   '(font-lock-negation-char-face ((t (:weight normal :slant normal :underline nil :inverse-video nil :foreground "#d70000"))))
   '(font-lock-preprocessor-face ((t (:weight normal :slant normal :underline nil :inverse-video nil :foreground "#d75f00" :inherit (font-lock-builtin-face)))))
   '(font-lock-regexp-grouping-backslash ((t (:weight normal :slant normal :underline nil :inverse-video nil :foreground "#af8700" :inherit (bold)))))
   '(font-lock-regexp-grouping-construct ((t (:weight normal :slant normal :underline nil :inverse-video nil :foreground "#d75f00" :inherit (bold)))))
   '(font-lock-string-face ((t (:weight normal :slant normal :underline nil :inverse-video nil :foreground "#00afaf"))))
   '(font-lock-type-face ((t (:weight normal :slant normal :underline nil :inverse-video nil :foreground "#d33682"))))
   '(font-lock-variable-name-face ((t (:weight normal :slant normal :underline nil :inverse-video nil :foreground "#0087ff"))))
   '(font-lock-warning-face ((t (:weight bold :slant normal :underline nil :inverse-video nil :foreground "#d70000" :inherit (error)))))
   '(button ((t (:inherit (link)))))
   '(link ((t (:weight normal :slant normal :underline (:color foreground-color :style line) :inverse-video nil :foreground "#5f5faf"))))
   '(link-visited ((t (:weight normal :slant normal :underline (:color foreground-color :style line) :inverse-video nil :foreground "#af005f" :inherit (link)))))
   '(fringe ((t (:foreground "#585858" :background "#262626"))))
   `(header-line ((t (:background ,xiaoming/fg :foreground ,xiaoming/bg))))
   '(tooltip ((((class color)) (:inherit (variable-pitch) :foreground "black" :background "lightyellow")) (t (:inherit (variable-pitch)))))
   '(mode-line ((t (:weight normal :slant normal :underline nil :box nil :inverse-video t :foreground "grey22" :background "light green"))))
   '(mode-line-buffer-id ((t (:weight bold :inherit (sml/filename)))))
   '(mode-line-emphasis ((t (:weight bold))))
   '(mode-line-highlight ((((class color) (min-colors 88)) (:box (:line-width 2 :color "grey40" :style released-button))) (t (:inherit (highlight)))))
   '(mode-line-inactive ((t (:weight normal :slant normal :underline nil :box nil :inverse-video nil :foreground "gray80" :background "#404045" :inherit (mode-line)))))
   '(isearch ((t (:weight normal :slant normal :underline nil :inverse-video t :foreground "#a33a37" :background "#f590ae"))))
   '(isearch-fail ((t (:weight normal :slant normal :underline nil :inverse-video t :foreground "#ffffff" :background "#f590ae"))))
   '(lazy-highlight ((t (:weight normal :slant normal :underline nil :inverse-video t :foreground "#465457" :background "#000000"))))
   '(match ((t (:weight normal :slant normal :underline nil :inverse-video t :foreground "#af8700" :background "#1c1c1c"))))
   '(next-error ((t (:inherit (region)))))
   `(ace-jump-face-background ((t (:inherit font-lock-comment-face))))
   `(ace-jump-face-foreground ((t (:foreground ,xiaoming/orange))))
   `(vertical-border ((t (:background ,xiaoming/darker-gray :foreground ,xiaoming/darkest-gray))))
   `(hl-line ((t (:background "#1f1f1f"))))
   `(highlight-indentation-face ((t (:background ,xiaoming/darkest-gray))))
   `(minibuffer-prompt ((t (:foreground ,xiaoming/bright-yellow :bold t :background nil))))
   `(compilation-error((t (:foreground ,xiaoming/red :bold t))))
   `(compilation-warning((t (:foreground ,xiaoming/orange :bold t))))
   `(compilation-info((t (:foreground ,xiaoming/green :bold t))))
   `(eshell-prompt ((t (:foreground ,xiaoming/purple))))
   `(eshell-ls-directory ((t (:foreground ,xiaoming/blue))))
   `(eshell-ls-product ((t (:foreground ,xiaoming/orange))))
   `(eshell-ls-backup ((t (:foreground ,xiaoming/darker-gray))))
   `(eshell-ls-executable ((t (:foreground ,xiaoming/green))))
   '(eshell-ls-archive ((t (:foreground "#af005f"))))
   '(eshell-ls-missing ((t (:foreground "red"))))
   `(eshell-ls-readonly ((t (:foreground ,xiaoming/purple))))
   `(eshell-ls-symlink ((t (:foreground ,xiaoming/red))))
   `(comint-highlight-prompt ((t (:foreground ,xiaoming/green))))
   `(erc-nick-default-face ((t (:foreground ,xiaoming/blue))))
   `(erc-my-nick-face ((t (:foreground ,xiaoming/yellow))))
   `(erc-current-nick-face ((t (:foreground ,xiaoming/light-blue))))
   `(erc-notice-face ((t (:foreground ,xiaoming/green))))
   `(erc-input-face ((t (:foreground "white"))))
   `(erc-timestamp-face ((t (:foreground ,xiaoming/darker-gray))))
   `(erc-prompt-face ((t (:foreground "#191919" :background ,xiaoming/purple))))
   `(undo-tree-visualizer-active-branch-face ((t (:inherit default))))
   `(undo-tree-visualizer-default-face ((t (:inherit font-lock-comment-face))))
   `(undo-tree-visualizer-register-face ((t (:foreground ,xiaoming/yellow :background nil))))
   `(undo-tree-visualizer-current-face ((t (:foreground ,xiaoming/red :background nil))))
   `(undo-tree-visualizer-unmodified-face ((t (:foreground ,xiaoming/purple :background nil))))
   `(show-paren-match ((t (:foreground nil :background ,xiaoming/dark-gray))))
   `(show-paren-mismatch ((t (:inherit error))))
   `(error ((t (:foreground "red"))))
   `(js2-external-variable((t (:foreground ,xiaoming/orange :background nil))))
   `(js2-function-param((t (:foreground ,xiaoming/dark-green :background nil))))
   `(js2-instance-member((t (:foreground ,xiaoming/purple :background nil))))
   `(js2-jsdoc-html-tag-delimiter((t (:foreground ,xiaoming/dark-gray :background nil))))
   `(js2-jsdoc-html-tag-name((t (:foreground ,xiaoming/darkest-gray :background nil))))
   `(js2-jsdoc-tag((t (:foreground ,xiaoming/dark-red :background nil))))
   `(js2-jsdoc-type((t (:foreground ,xiaoming/red :background nil))))
   `(js2-jsdoc-value((t (:foreground ,xiaoming/tan :background nil))))
   `(js2-private-function-call((t (:foreground ,xiaoming/dark-green :background nil))))
   `(js2-private-member((t (:foreground ,xiaoming/dark-tan :background nil))))
   `(js2-warning((t (:foreground nil :background nil :underline ,xiaoming/orange))))
   `(web-mode-block-attr-name-face((t (:foreground "#8fbc8f" :background nil))))
   `(web-mode-block-attr-value-face((t (:inherit font-lock-string-face))))
   `(web-mode-block-comment-face((t (:inherit font-lock-comment-face))))
   `(web-mode-block-control-face((t (:inherit font-lock-preprocessor-face))))
   `(web-mode-block-delimiter-face((t (:inherit font-lock-preprocessor-face))))
   `(web-mode-block-face((t (:foreground nil :background "LightYellow1"))))
   `(web-mode-block-string-face((t (:inherit font-lock-string-face))))
   `(web-mode-builtin-face((t (:inherit font-lock-builtin-face))))
   `(web-mode-comment-face((t (:inherit font-lock-comment-face))))
   `(web-mode-comment-keyword-face((t (:foreground nil :background nil :bold t))))
   `(web-mode-constant-face((t (:foreground ,xiaoming/purple :background nil))))
   `(web-mode-css-at-rule-face((t (:foreground ,xiaoming/purple :background nil))))
   `(web-mode-css-color-face((t (:foreground ,xiaoming/light-blue :background nil))))
   `(web-mode-css-comment-face((t (:inherit font-lock-comment-face))))
   `(web-mode-css-function-face((t (:foreground ,xiaoming/light-blue :background nil))))
   `(web-mode-css-priority-face((t (:foreground ,xiaoming/light-blue :background nil))))
   `(web-mode-css-property-name-face((t (:inherit font-lock-variable-name-face))))
   `(web-mode-css-pseudo-class-face((t (:foreground ,xiaoming/light-blue :background nil))))
   `(web-mode-css-selector-face((t (:foreground ,xiaoming/blue :background nil))))
   `(web-mode-css-string-face((t (:foreground ,xiaoming/tan :background nil))))
   `(web-mode-current-element-highlight-face((t (:foreground nil :background "#000000"))))
   `(web-mode-doctype-face((t (:inherit font-lock-doc-face))))
   `(web-mode-error-face((t (:inherit error))))
   `(web-mode-folded-face((t (:foreground nil :background nil :underline t))))
   `(web-mode-function-call-face((t (:inherit font-lock-function-name-face))))
   `(web-mode-function-name-face((t (:inherit font-lock-function-name-face))))
   `(web-mode-html-attr-custom-face((t (:inherit font-lock-comment-face))))
   `(web-mode-html-attr-equal-face((t (:inherit font-lock-comment-face))))
   `(web-mode-html-attr-name-face((t (:inherit font-lock-comment-face))))
   `(web-mode-html-attr-value-face((t (:inherit font-lock-string-face))))
   `(web-mode-html-tag-bracket-face((t (:inherit font-lock-comment-face))))
   `(web-mode-html-tag-custom-face((t (:inherit font-lock-comment-face))))
   `(web-mode-html-tag-face((t (:inherit font-lock-comment-face))))
   `(web-mode-javascript-comment-face((t (:inherit font-lock-comment-face))))
   `(web-mode-javascript-string-face((t (:inherit font-lock-string-face))))
   `(web-mode-json-comment-face((t (:inherit font-lock-comment-face))))
   `(web-mode-json-context-face((t (:foreground "orchid3" :background nil))))
   `(web-mode-json-key-face((t (:foreground "plum" :background nil))))
   `(web-mode-json-string-face((t (:inherit font-lock-string-face))))
   `(web-mode-keyword-face((t (:inherit font-lock-keyword-face))))
   `(web-mode-param-name-face((t (:foreground "Snow3" :background nil))))
   `(web-mode-part-comment-face((t (:inherit font-lock-comment-face))))
   `(web-mode-part-face((t (:foreground nil :background "LightYellow1"))))
   `(web-mode-part-string-face((t (:inherit font-lock-string-face))))
   `(web-mode-preprocessor-face((t (:inherit font-lock-preprocessor-face))))
   `(web-mode-string-face((t (:inherit font-lock-string-face))))
   `(web-mode-symbol-face((t (:foreground "gold" :background nil))))
   `(web-mode-type-face((t (:inherit font-lock-type-face))))
   `(web-mode-variable-name-face((t (:inherit font-lock-variable-name-face))))
   `(web-mode-warning-face((t (:inherit font-lock-warning-face))))
   `(web-mode-whitespace-face((t (:foreground nil :background "DarkOrchid4"))))
   `(helm-M-x-key((t (:foreground ,xiaoming/orange :underline nil))))
   `(helm-candidate-number((t (:foreground ,xiaoming/green :background ,xiaoming/darker-gray))))
   `(helm-ff-directory((t (:foreground ,xiaoming/blue))))
   `(helm-ff-executable((t (:foreground ,xiaoming/green))))
   `(helm-ff-file((t (:inherit default))))
   `(helm-ff-prefix((t (:foreground ,xiaoming/red))))
   `(helm-header((t (:foreground ,xiaoming/bg :background ,xiaoming/fg))))
   `(helm-match((t (:foreground ,xiaoming/blue :background ,xiaoming/darkest-gray))))
   `(helm-selection((t (:foreground ,xiaoming/yellow :background ,xiaoming/region :bold t))))
          `(helm-source-header((t (:foreground ,xiaoming/darkest-gray :background ,xiaoming/blue))))
   '(rainbow-delimiters-depth-1-face ((t (:foreground "cyan" :background nil))))
   '(rainbow-delimiters-depth-2-face ((t (:foreground "yellow" :background nil))))
   '(rainbow-delimiters-depth-3-face ((t (:foreground "blue" :background nil))))
   '(rainbow-delimiters-depth-4-face ((t (:foreground "red" :background nil))))
   '(rainbow-delimiters-depth-5-face ((t (:foreground "green" :background nil))))
   '(rainbow-delimiters-depth-6-face ((t (:foreground "magenta" :background nil))))
   '(rainbow-delimiters-depth-7-face ((t (:foreground "orange" :background nil))))
   '(rainbow-delimiters-depth-8-face ((t (:foreground "yellow" :background nil))))
   '(rainbow-delimiters-depth-9-face ((t (:foreground "#268bd2" :background nil))))
   '(rainbow-delimiters-unmatched-face ((t (:inherit error))))
   `(message-cited-text ((t (:inherit font-lock-comment-face))))
   `(message-header-cc ((t (:foreground ,xiaoming/light-blue :background nil :bold t))))
   `(message-header-name ((t (:foreground ,xiaoming/orange :background nil))))
   `(message-header-newsgroups ((t (:foreground ,xiaoming/dark-tan :background nil :bold t))))
   `(message-header-other ((t (:foreground ,xiaoming/blue :background nil))))
   `(message-header-subject ((t (:foreground ,xiaoming/tan :background nil))))
   `(message-header-to ((t (:foreground ,xiaoming/yellow :background nil :bold t))))
   `(message-header-xheader ((t (:foreground ,xiaoming/purple :background nil))))
   `(message-mml ((t (:foreground ,xiaoming/dark-tan :background nil))))
   `(magit-branch((t (:foreground ,xiaoming/orange :background nil))))
   `(magit-diff-add((t (:foreground nil :background ,xiaoming/dark-green))))
   `(magit-diff-del((t (:foreground nil :background ,xiaoming/dark-red))))
   `(magit-diff-file-header((t (:foreground ,xiaoming/bg :background ,xiaoming/blue :bold t))))
   `(magit-diff-hunk-header((t (:foreground ,xiaoming/bg :background ,xiaoming/blue))))
   `(magit-diff-merge-current((t (:foreground ,xiaoming/orange :background nil))))
   `(magit-diff-merge-diff3-separator((t (:foreground ,xiaoming/orange :background nil))))
   `(magit-diff-merge-proposed((t (:foreground ,xiaoming/orange :background nil))))
   `(magit-diff-merge-separator((t (:foreground ,xiaoming/orange :background nil))))
   `(magit-diff-none((t (:foreground ,xiaoming/fg :background ,xiaoming/darker-gray))))
   `(magit-header((t (:foreground ,xiaoming/blue :background nil))))
   `(magit-item-highlight((t (:foreground nil :background ,xiaoming/darker-gray))))
   `(magit-key-mode-button-face((t (:foreground ,xiaoming/light-blue :background nil))))
   `(magit-key-mode-header-face((t (:foreground ,xiaoming/blue :background nil))))
   `(magit-log-author((t (:foreground ,xiaoming/red :background nil))))
   `(magit-log-author-date-cutoff((t (:foreground ,xiaoming/red :background nil :bold t))))
   `(magit-log-date((t (:foreground nil :background nil))))
   `(magit-log-graph((t (:foreground "grey80" :background nil))))
   `(magit-log-sha1((t (:foreground ,xiaoming/purple :background nil))))
   `(magit-section-title((t (:foreground ,xiaoming/blue :background nil))))
   `(magit-tag((t (:foreground ,xiaoming/blue :background nil))))
   `(magit-whitespace-warning-face((t (:foreground ,xiaoming/bg :background "white" :bold t))))
   `(git-gutter:deleted ((t (:foreground ,xiaoming/red :background nil :bold t))))
   `(git-gutter:modified ((t (:foreground ,xiaoming/purple :background nil :bold t))))
   `(git-gutter:separator ((t (:foreground ,xiaoming/orange :background nil :bold t))))
   `(git-gutter:unchanged ((t (:foreground ,xiaoming/yellow :background nil))))
   `(highlight-indentation-current-column-face ((t (:foreground nil :background ,xiaoming/gray))))
   `(highlight-indentation-face ((t (:foreground nil :background ,xiaoming/darkest-gray))))
   ;; Swoop
   `(swoop-face-header-format-line ((,class (:foreground ,xiaoming/dark-gray :background nil :underline nil))))
   `(swoop-face-line-buffer-name ((,class (:foreground ,xiaoming/green :background ,xiaoming/dark-green))))
   `(swoop-face-line-number ((,class (:foreground "#87875f" :background "#d7d7af"))))
   `(swoop-face-target-line ((,class (:foreground ,xiaoming/yellow :background ,xiaoming/dark-gray))))
   `(swoop-face-target-words ((,class (:foreground ,xiaoming/orange :background ,xiaoming/dark-gray :bold t))))
   `(helm-swoop-target-line-block-face ((,class (:foreground ,xiaoming/tan :background ,xiaoming/dark-gray))))
   `(helm-swoop-target-line-face ((,class (:foreground ,xiaoming/dark-tan :background ,xiaoming/dark-gray))))
   `(helm-swoop-target-word-face ((,class (:foreground ,xiaoming/red :background ,xiaoming/dark-gray :bold t))))
   ;; table
   `(table-cell ((,class (:foreground "#ffffff" :background ,xiaoming/dark-gray))))
   `(query-replace ((t (:inherit (isearch)))))))

(provide-theme 'xiaoming)

;; Local Variables:
;; coding: utf-8
;; End:
;;; xiaoming-theme.el ends here
